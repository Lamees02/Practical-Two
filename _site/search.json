[
  {
    "objectID": "PracticalTwo.html",
    "href": "PracticalTwo.html",
    "title": "Parallel Computing Practical",
    "section": "",
    "text": "GitHub Link\n\n1 Question 1\n\n\nCode\nnum_it &lt;- 100\n\nresults &lt;- foreach(i = 1:num_it, .combine = rbind) %do% {\n  sample &lt;- rexp(100, rate = 1) \n  \n  sample_mean &lt;- mean(sample)\n  sample_var &lt;- var(sample)\n  \n  c(sample_mean, sample_var)\n}\n\nresults &lt;- as.data.frame(results)\ncolnames(results) &lt;- c(\"Mean\", \"Variance\")\n\nkable(head(round(results, 3)))\n\n\n\n\n\n\nMean\nVariance\n\n\n\n\nresult.1\n0.967\n0.874\n\n\nresult.2\n0.931\n1.072\n\n\nresult.3\n0.901\n0.828\n\n\nresult.4\n1.033\n0.839\n\n\nresult.5\n0.938\n0.649\n\n\nresult.6\n0.970\n1.040\n\n\n\n\n\n\n\n2 Question 2\n\n\nCode\ndata(galaxies)\n\nnum_samples &lt;- 10000\n\nnum_cores &lt;- detectCores() - 1  \n\ncl &lt;- makeCluster(num_cores)\nregisterDoParallel(cl)\n\nsystem.time({\n  results_parallel &lt;- foreach(i = 1:num_samples, .combine = c, .packages = 'MASS') %dopar% {\n    sample_data &lt;- sample(galaxies, replace = TRUE)\n    median(sample_data)\n  }\n})\n\n\n   user  system elapsed \n  1.409   0.146   1.612 \n\n\nCode\nstopCluster(cl)\n\nsystem.time({\n  results_serial &lt;- foreach(i = 1:num_samples, .combine = c) %do% {\n    sample_data &lt;- sample(galaxies, replace = TRUE)\n    median(sample_data)\n  }\n})\n\n\n   user  system elapsed \n  1.207   0.008   1.215 \n\n\n\n\n3 Question 3\n\n\nCode\nbootstrap_ci &lt;- function(sample_data, B = 1000, alpha = 0.05) {\n  boot_medians &lt;- replicate(B, median(sample(sample_data, replace = TRUE)))  \n  quantile(boot_medians, probs = c(alpha/2, 1 - alpha/2))  # 95% CI\n}\n\ntrue_median &lt;- log(2) \n\nnum_simulations &lt;- 1000\nsample_size &lt;- 50 \n\ncoverage_results &lt;- foreach(i = 1:num_simulations, .combine = c) %do% {\n  sample_data &lt;- rexp(sample_size, rate = 1) \n  ci &lt;- bootstrap_ci(sample_data) \n  (ci[1] &lt;= true_median) & (ci[2] &gt;= true_median) \n}\n\ncoverage_probability &lt;- round(mean(coverage_results), 4)\ncat(\"Estimated Coverage Probability:\", coverage_probability)\n\n\nEstimated Coverage Probability: 0.944\n\n\n\n\n4 Question 4\n\n\nCode\nset.seed(1234)\n\niter &lt;- irnorm(n = 5, mean = 0, sd = 1)  \n\nlargest_values &lt;- foreach(i = 1:3, .combine = c) %do% {\n  max(nextElem(iter)) \n}\n\n\ncat(round(largest_values, 3) , sep = \" \")\n\n\n1.084 0.506 0.959\n\n\n\n\n5 Question 5\n\n\nCode\ntask &lt;- function() {\n  max(rnorm(5))\n}\n\nB &lt;- 1000\n\ncl &lt;- makeCluster(detectCores() - 1)\nregisterDoParallel(cl)\n\nclusterExport(cl, varlist = c(\"task\"))  \nsystem.time({\n  par_result &lt;- parLapply(cl, 1:B, function(i) task())\n})\n\n\n   user  system elapsed \n  0.003   0.000   0.029 \n\n\nCode\nsystem.time({\n  foreach_result &lt;- foreach(i = 1:B, .combine = c) %dopar% {\n    task()\n  }\n})\n\n\n   user  system elapsed \n  0.156   0.018   0.192 \n\n\nCode\nsystem.time({\n  replicate_result &lt;- replicate(B, task())\n})\n\n\n   user  system elapsed \n  0.003   0.000   0.003 \n\n\nCode\nstopCluster(cl)"
  }
]